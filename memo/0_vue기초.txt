일단 깃허브에 레포지토리 하나 만들면서 시작!
git bash
git config --global user.name "이름"
git config --global user.email "계정 이메일"
git config --list -> 확인
git init
git branch -m master main
git remote add origin 깃허브 레포지토리 url
git add .
git commit -m 메세지
git push origin main

▷ Vue.js
    UI 개발을 위해 설계된 Javascript 프레임워크. 경량화된 구조와 Virtual DOM 기반의 성능 향상 기능을 제공.

▶ Vue.js 를 사용하는 이유
    1) 다른 언어에 비해 학습 곡선이 낮다.
    2) 다양한 플러그인과 라이브러리 제공 [어플리케이션을 쉽게 개발할 수 있다.]
        - Vue Router, Vuex, Nuxt.js 등 (라우팅 관리, 컴포넌트 간 상태 관리, 서버사이드렌더링 구현)
    3) Virtual DOM [리액트도 이 방식]
        - 가상 돔을 사용하여 변화가 있는 부분만 DOM에 적용하여 효율적인 렌더링을 수행. [우리는 js 에서 했던대로 하면 알아서 됨]
    4) 양방향 데이터 바인딩 가능 [UI 에 변경된 데이터 반영, 동기화를 의미]
    5) 재사용이 가능한 컴포넌트를 사용
        - 단일 파일 컴포넌트로 템플릿, 스타일, 스크립트를 한 곳에서 관리
    6) SPA 개발에 최적화 [싱글 페이지 어플리케이션]

▶ VSCode vue 개발을 위한 환경 설정
    [지금은 html 에서 vue 문법만 알아보고, 단일 파일 컴포넌트는 나중에 보자!]
    1) vue 설치 (아직 진행 X)
        설치 확인 : 터미널 -> vue -version 확인, 없으면 설치 진행! (Node가 설치되어있다는 가정하에 진행)
        설치 진행 : 터미널 -> npm install -g @vue/cli

    확장 프로그램
        - ESLint - 자바스크립트 문법 체크
        - Vue VSCode Snippets : vue 형식의 자동완성을 지원
        - Vue - Official (Volar) : 자동완성 등을 지원하는 확장 도구

▶ Vue 의 기본 렌더링 방식 보간법 (Vue 에서 부르는 용어 정도)
    보간법이란 데이터를 HTML 로 출력하는 방법, 데이터 렌더링(정보를 시각적으로 확인할 수 있는 형태로 변환).
    콧수염 표현식, 보간법 이라고 부른다.
    MVVM 패턴. View <-> ViwModel <-> Model

