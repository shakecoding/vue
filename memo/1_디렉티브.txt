▷ 디렉티브
    템플릿 안에서 사용하는 v- 로 시작하는 속성.
    HTML 요소와 관련된 작업을 지정할 수 있다. 여러가지 종류가 있다.
    데이터 바인딩의 목적을 위해 사용한다.
    [ 데이터 바인딩은 UI 요소와 데이터 소스 간의 연결. ]

▶ 기본 디렉티브 -> 단방향 데이터 바인딩
    Vue 인스턴스의 데이터가 바뀌면 UI 갱신,
    반대로 UI에서 데이터가 바뀐다고해서 Vue 인스턴스의 값은 변경되지 않는다.

    종류
    v-text, {{}} : innerText 속성과 같음
    v-html : innerHTML 속성과 같음 -> 태그까지 같이 보내버리면 html 에 반영.
    v-bind : 속성을 바인딩하기 위해 사용

▶ v-model 디렉티브 -> 양뱡향 데이터 바인딩
    양방향 데이터 바인딩은 UI에서 데이터가 바뀐다면
    Vue 인스턴스의 값도 변경되는 것을 말한다.
    input, select, checkbox 등등 모두 적용할 수 있다.

    ※ 한글 렌더링 문제는 이벤트로 해결할 수 있다.

    [실습 후 작성]
    - 여러 개 선택할 수 있는 경우 배열을 이용하여 받음.
    - 하나만 선택할 수 있는 경우 문자열로 받음.

▶ 조건 렌더링 디렉티브
    조건에 따라 화면에 보여줄 지 말지를 결정할 수 있다.

    v-if, v-else-if, v-else='조건'
        우리가 아는 조건문과 똑같이 작동한다. 조건이 false 면 렌더링을 수행하지 않는다.
        렌더링을 수행하지 않는다는 의미는 html 요소를 생성하지 않는 것이다.
    
    v-show='조건'
        조건이 true 이든 false 이든 렌더링은 수행한다.
        단, false 면 display = none; 속성을 부여해서 화면에 보이지 않게끔 한다.

▶ 반복 렌더링 디렉티브
    v-for
        배열이나 객체의 항목을 반복하여 렌더링 할 수 있다.
    key 속성
        각 항목에는 반드시 고유한 key 속성을 지정해야 한다.
        추 후 항목에 변경 사항을 효율적으로 추적하고 업데이트 하는데 도움을 준다.
        키 값이 중복되면 경고 표시가 뜬다.
        키 값으로 사용할 컬럼이 없을 경우 index 변수로, 인덱스 번호를 부여할 수 있다. (권장하지 않음)

        ※ key 에 index를 부여하지 않는 이유
        0,1,2,3,4 로 객체가 번호를 부여한 상황에서 제일 앞에 데이터를 추가한다면,
        1,2,3,4,5 로 원래있던 객체들의 인덱스 번호가 바뀌게 된다.
        그렇다면 vue 에서는 변화로 판단하여 다시 렌더링을 수행하게 된다.
        데이터가 많은 경우에서는 상당히 성능을 보장하기 힘들다.

▶ 기타 디렉티브
    v-pre : 콧수염까지 있는 그대로 컴파일 하지 않고 출력
    v-once : 한 번 렌더링 되면 다시 렌더링 하지 않음
    v-cloak : 살짝 보이는 콧수염을 보이지 않게 한다.
        - Vue 인스턴스가 템플릿을 컴파일할 때 발생하는 시간 때문에 생기는 현상!

